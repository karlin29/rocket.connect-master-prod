version: "3"

volumes:
  local_postgres_data: {}
  local_postgres_data_backups: {}
  local_rocket_uploads: {}
  local_rocket_db: {}
  local_rocket_db_config: {}
  local_rocket_db_dump: {}
  local_waautomate_data: {}

services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
    image: rocket_connect_local_django
    container_name: django
    depends_on:
      - postgres
      - mailhog
    volumes:
      - .:/app:z
    env_file:
      - ./.envs/.local/.django
      - ./.envs/.local/.postgres
    ports:
      - "8000:8000"
    healthcheck:
      test: curl --fail http://localhost:8000
      interval: 30s
      timeout: 10s
      retries: 3

    command: /start

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: rocket_connect_production_postgres
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - local_postgres_data:/var/lib/postgresql/data:Z
      - local_postgres_data_backups:/backups:z
    env_file:
      - ./.envs/.local/.postgres

  docs:
    image: rocket_connect_local_docs
    container_name: docs
    build:
      context: .
      dockerfile: ./compose/local/docs/Dockerfile
    env_file:
      - ./.envs/.local/.django
    volumes:
      - ./docs:/docs:z
      - ./config:/app/config:z
      - ./rocket_connect:/app/rocket_connect:z
    ports:
      - "7000:7000"
    command: /start-docs

  mailhog:
    image: mailhog/mailhog:v1.0.0
    container_name: mailhog
    ports:
      - "8025:8025"

  redis:
    image: redis:5.0
    container_name: redis

  celeryworker:
    <<: *django
    image: rocket_connect_local_celeryworker
    container_name: celeryworker
    depends_on:
      - redis
      - postgres
      - mailhog
    ports: []
    healthcheck:
      disable: true
    command: /start-celeryworker

  celerybeat:
    <<: *django
    image: rocket_connect_local_celerybeat
    container_name: celerybeat
    depends_on:
      - redis
      - postgres
      - mailhog
    ports: []
    healthcheck:
      disable: true
    command: /start-celerybeat

  flower:
    <<: *django
    image: rocket_connect_local_flower
    container_name: flower
    ports:
      - "5555:5555"
    healthcheck:
      test: curl --fail http://localhost:5555
      interval: 30s
      timeout: 10s
      retries: 3
    command: /start-flower

  rocketchat:
    image: rocketchat/rocket.chat:3.14.0
    command: >
      bash -c
        "for i in `seq 1 30`; do
          node main.js &&
          s=$$? && break || s=$$?;
          echo \"Tried $$i times. Waiting 5 secs...\";
          sleep 5;
        done; (exit $$s)"
    restart: unless-stopped
    volumes:
      - local_rocket_uploads:/app/uploads
    environment:
      - ADMIN_USERNAME=admin
      - ADMIN_PASS=admin
      - ADMIN_EMAIL=admin@example.com
      - PORT=3000
      - ROOT_URL=http://localhost:3000
      - MONGO_URL=mongodb://mongo:27017/rocketchat
      - MONGO_OPLOG_URL=mongodb://mongo:27017/local
      - OVERWRITE_SETTING_Accounts_TwoFactorAuthentication_Enforce_Password_Fallback=false
      - OVERWRITE_SETTING_SMTP_HOST=mailhog
      - OVERWRITE_SETTING_SMTP_PORT=1025
      - OVERWRITE_SETTING_SMTP_Username=smtp_user
      - OVERWRITE_SETTING_SMTP_Password=smtp_password
      - OVERWRITE_SETTING_SMTP_From_Email=from@email.smtp
      - OVERWRITE_SETTING_Show_Setup_Wizard=completed
      - OVERWRITE_SETTING_API_Enable_Rate_Limiter=false
      - CREATE_TOKENS_FOR_USERS=true
    depends_on:
      - mongo
    ports:
      - 3000:3000

  mongo:
    image: mongo:4.0
    restart: unless-stopped
    ports:
      - 27017:27017
    volumes:
      - local_rocket_db:/data/db
      - local_rocket_db_config:/data/configdb
      - local_rocket_db_dump:/dump
    command: mongod --smallfiles --oplogSize 128 --replSet rs0 --storageEngine=mmapv1
    labels:
      - "traefik.enable=false"

  mongo-init-replica:
    image: mongo:4.0
    command: 'bash -c "for i in `seq 1 30`; do mongo mongo/rocketchat --eval \"rs.initiate({ _id: ''rs0'', members: [ { _id: 0, host: ''localhost:27017'' } ]})\" && s=$$? && break || s=$$?; echo \"Tried $$i times. Waiting 5 secs...\"; sleep 5; done; (exit $$s)"'
    depends_on:
      - mongo

  browser:
      image: browserless/chrome:1.22-chrome-stable
      hostname: browser
      ports:
        - "3010:3000"
      deploy:
        replicas: 1
        update_config:
          parallelism: 1
          delay: 10s
        restart_policy:
          condition: on-failure
      environment:
        CONNECTION_TIMEOUT: -1
        KEEP_ALIVE: 'true'
        WORKSPACE_EXPIRE_DAYS: 1
        ENABLE_CORS: 'true'
        CHROME_REFRESH_TIME: 86400000
        DEFAULT_BLOCK_ADS: 'true'
        FUNCTION_ENABLE_INCOGNITO_MODE: 'true'
        ENABLE_XVBF: 'true'
        CHROME_PATH: '/usr/bin/google-chrome'
        USE_CHROME_STABLE: 'true'
        NODE_ENV: 'production'

  waautomate1:
    # waautomate options ar at  ./compose/local/waautomate/cli.config.json
    build:
      context: ./compose/local/waautomate
    command: npx @open-wa/wa-automate --ev "http://django.docker:8000/connector/CONNECTOR_EXTERNAL_TOKEN1/?ev=1" --no-kill-on-logout
    restart: unless-stopped
    volumes:
      - local_waautomate_data:/usr/src/app/session_data
      - ./compose/local/waautomate/instance1/cli.config.json:/usr/src/app/cli.config.json
    links:
      - "django:django.docker"
    depends_on:
      - browser
    ports:
      - "8001:8002"

  waautomate2:
    # waautomate options ar at  ./compose/local/waautomate/cli.config.json
    build:
      context: ./compose/local/waautomate
    command:  npx @open-wa/wa-automate --ev "http://django.docker:8000/connector/CONNECTOR_EXTERNAL_TOKEN2/?ev=2" -c instance2/cli.config.json --no-kill-on-logout
    restart: unless-stopped
    volumes:
      - local_waautomate_data:/usr/src/app/session_data
      - ./compose/local/waautomate/instance2/cli.config.json:/usr/src/app/cli.config.json
    links:
      - "django:django.docker"
    depends_on:
      - browser
    ports:
      - "8002:8002"
